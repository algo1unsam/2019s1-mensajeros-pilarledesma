import mensajeros.*
import paquetes.*
import destinos.*
import transportes.*

/*test "La mensajeria tiene a neo como empleado si lo agregarmos" {
	mensajeria.contratar(neo)
	assert.that(mensajeria.mensajeros().contains(neo))
}

test "Si neo es empleado, Hay un mensajero que puede enviar el paquete" {
	mensajeria.contratar(neo)
	paquete.pagar()
	paquete.destino(matrix)
	assert.that(mensajeria.mensajeros().contains(neo))
}*/

test "Roberto lleva un paquete pago en camion con acoplado"{
	
	
	roberto.peso(90)
	roberto.transporte(camion)
	roberto.pesoTotal()
	paquete.pagarPaquete() 
	
	assert.equals(true, paquete.puedeSerEntregado(puenteDeBrooklyn, roberto))
}

test "Neo con credito y paquete no pago"{
	
	
	neo.cargarCredito()	
	
	assert.equals(false, paquete.puedeSerEntregado(laMatrix, neo))
}

test "RRHH"{
	
	mensajeria.contratar(chuck)
	mensajeria.contratar(neo)
	mensajeria.despedir(chuck)
	mensajeria.contratar(roberto)
	mensajeria.despedirTodos()
	
	assert.equals(0, mensajeria.devuelveTamanio())
}

test "Primer empleado puede entregar paquete"{
	
	paquete.pagarPaquete()
	mensajeria.contratar(chuck)
	mensajeria.contratar(neo)
	
	
	assert.equals(true, mensajeria.puedeEntregarloElPrimero(laMatrix))
}


test "Peso del ultimo mensajero"{
	
	roberto.peso(100)
	roberto.transporte(bicicleta)
	mensajeria.contratar(chuck)
	mensajeria.contratar(neo)
	mensajeria.contratar(roberto)
	
	assert.equals(roberto.pesoTotal(),mensajeria.pesoUltimoMensajero())
}

